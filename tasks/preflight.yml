---

- name: Fail when variables are not defined
  ansible.builtin.fail:
    msg: "The {{ item }} property must be set"
  when: ( vars[item] is not defined )
  with_items:
    - cbmultimanager_version
    - cbmultimanager_user
    - cbmultimanager_user_group
    - cbmultimanager_user_shell
    - cbmultimanager_user_createhome
    - cbmultimanager_install_dir
    - cbmultimanager_binary
    - cbmultimanager_conf_dir
    - cbmultimanager_env_file
    - cbmultimanager_local_tmp_dir
    - cbmultimanager_log_level
    - cbmultimanager_log_dir
    - cbmultimanager_data_dir
    - cbmultimanager_sqlite_dbname
    - cbmultimanager_sqlite_password
    - cbmultimanager_cert_path
    - cbmultimanager_key_path
    - cbmultimanager_admin_user
    - cbmultimanager_admin_password
    - cbmultimanager_log_check_lifetime
    - cbmultimanager_enable_admin_api
    - cbmultimanager_enable_cluster_mgmt_api
    - cbmultimanager_enable_extended_api
    - cbmultimanager_prometheus_url
    - cbmultimanager_prometheus_label_selector
    - cbmultimanager_alertmanager_urls
    - cbmultimanager_alertmanager_resend_delay
    - cbmultimanager_alert_manager_base_labels
    - couchbase_username
    - couchbase_password
    - cbmultimanager_http_port
    - cbmultimanager_https_port

- name: Fail when variables do not have a length
  ansible.builtin.fail:
    msg: "The {{ item }} property must be valued"
  when: ( vars[item] | string | length == 0 )
  with_items:
    - cbmultimanager_version
    - cbmultimanager_user
    - cbmultimanager_user_group
    - cbmultimanager_user_shell
    - cbmultimanager_install_dir
    - cbmultimanager_binary
    - cbmultimanager_conf_dir
    - cbmultimanager_env_file
    - cbmultimanager_local_tmp_dir
    - cbmultimanager_log_level
    - cbmultimanager_log_dir
    - cbmultimanager_data_dir
    - cbmultimanager_sqlite_dbname
    - cbmultimanager_sqlite_password
    - cbmultimanager_admin_user
    - cbmultimanager_admin_password
    - cbmultimanager_log_check_lifetime
    - cbmultimanager_alertmanager_urls
    - cbmultimanager_alertmanager_resend_delay
    - cbmultimanager_alert_manager_base_labels
    - couchbase_username
    - couchbase_password

- name: Fail when cbmultimanager ports are not a number
  ansible.builtin.fail:
    msg: "The {{ item }} property must be an integer"
  when: ( vars[item] is not number )
  with_items:
    - cbmultimanager_http_port
    - cbmultimanager_https_port

- name: Fail when out enable flags are not a boolean
  ansible.builtin.fail:
    msg: "The {{ item }} property must be a boolean true or false "
  when: ( vars[item] | bool | string | lower ) not in ['true', 'false']
  with_items:
    - cbmultimanager_enable_admin_api
    - cbmultimanager_enable_cluster_mgmt_api
    - cbmultimanager_enable_extended_api
    - cbmultimanager_user_createhome

- name: Fail when the log level contains an invalid value
  ansible.builtin.fail:
    msg: "The cbmultimanager_log_level can only be: debug, info, warn, error"
  when: ( cbmultimanager_log_level not in ['debug','info','warn','error'] )

- name: Fail when cbmultimanager_local_binary_path is defined but the file doesn't exist
  block:
    - name: Check if cbmultimanager_local_binary_path exists
      ansible.builtin.stat:
        path: "{{ cbmultimanager_install_dir }}/{{ cbmultimanager_binary }}"
      register: __cbmultimanager_local_binary_check
      become: false
      delegate_to: localhost
      check_mode: false

    - name: Fail when the cbmultimanager_local_binary_path does not exist
      ansible.builtin.fail:
        msg: "The cbmultimanager_local_binary_path ({{ cbmultimanager_local_binary_path }}) was specified but does not exist"
      when: not __cbmultimanager_local_binary_check.stat.exists
  when: cbmultimanager_local_binary_path is defined and cbmultimanager_local_binary_path | length > 0

- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version
  ansible.builtin.command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  ansible.builtin.set_fact:
    cbmultimanager_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Check if cbmultimanager is installed
  ansible.builtin.stat:
    path: "{{ cbmultimanager_install_dir }}/{{ cbmultimanager_binary }}"
  register: __cbmultimanager_is_installed
  check_mode: false

- name: Install Checks
  block:
    - name: Gather currently installed cbmultimanager version
      ansible.builtin.command:
        cmd: |
          {{ cbmultimanager_install_dir }}/{{ cbmultimanager_binary }} --version
      changed_when: false
      register: __cbmultimanager_current_version_output
      check_mode: false

    - name: Set cbmultimanager Installed Version
      ansible.builtin.set_fact:
        cbmultimanager_installed_version: "{{ __cbmultimanager_current_version_output.stdout.split(' ')[5] }}"

    - name: cbmultimanager Installed Version
      ansible.builtin.debug:
        var: cbmultimanager_installed_version
  when: __cbmultimanager_is_installed.stat.exists

- name: cbmultimanager Version
  ansible.builtin.debug:
    var: cbmultimanager_version

- name: cbmultimanager Exporter Download URL
  ansible.builtin.debug:
    msg: "{{ _cbmultimanager_download_url }}"

- name: Set whether or not to do the install
  ansible.builtin.set_fact:
    __cbmultimanager_do_install: "{{ (not __cbmultimanager_is_installed.stat.exists or cbmultimanager_installed_version is version_compare(cbmultimanager_version, '<')) | bool }}"

- name: Do Install
  ansible.builtin.debug:
    var: __cbmultimanager_do_install
